// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH insert_feed_follow as (
    INSERT INTO feed_follows (id, created_at, updated_at, feed_id, user_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, created_at, updated_at, feed_id, user_id
)
SELECT
    ff.id, 
    ff.created_at, 
    ff.updated_at, 
    ff.feed_id,
    f.name as feed_name,
    f.url as feed_url,
    ff.user_id,
    u.name as user_name
FROM insert_feed_follow ff
    JOIN feeds f ON f.id = ff.feed_id
    JOIN users u ON u.id = ff.user_id
`

type CreateFeedFollowParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    string
	UserID    string
}

type CreateFeedFollowRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    string
	FeedName  string
	FeedUrl   string
	UserID    string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FeedID,
		arg.UserID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.FeedName,
		&i.FeedUrl,
		&i.UserID,
		&i.UserName,
	)
	return i, err
}

const getAllFeedFollows = `-- name: GetAllFeedFollows :many
SELECT 
ff.id, 
ff.created_at, 
ff.updated_at, 
ff.feed_id,
f.name as feed_name,
f.url as feed_url,
ff.user_id,
u.name as user_name
FROM feed_follows ff
    JOIN feeds f ON f.id = ff.feed_id
    JOIN users u ON u.id = ff.user_id
`

type GetAllFeedFollowsRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    string
	FeedName  string
	FeedUrl   string
	UserID    string
	UserName  string
}

func (q *Queries) GetAllFeedFollows(ctx context.Context) ([]GetAllFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedFollows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFeedFollowsRow
	for rows.Next() {
		var i GetAllFeedFollowsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.FeedName,
			&i.FeedUrl,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT 
ff.id, 
ff.created_at, 
ff.updated_at, 
ff.feed_id,
f.name as feed_name,
f.url as feed_url,
ff.user_id,
u.name as user_name
FROM feed_follows ff
    JOIN feeds f ON f.id = ff.feed_id
    JOIN users u ON u.id = ff.user_id
WHERE u.name = $1
`

type GetFeedFollowsForUserRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedID    string
	FeedName  string
	FeedUrl   string
	UserID    string
	UserName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userName string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.FeedName,
			&i.FeedUrl,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFeedFollow = `-- name: RemoveFeedFollow :exec
DELETE FROM feed_follows WHERE id = $1
`

func (q *Queries) RemoveFeedFollow(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeFeedFollow, id)
	return err
}
