// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: misc.sql

package database

import (
	"context"
	"time"
)

const getAllUserFeeds = `-- name: GetAllUserFeeds :many
SELECT
    f.id,
    f.created_at,
    f.updated_at,
    f.name,
    f.url,
    f.user_id,
    u.name as user_name
FROM feeds f
    JOIN users u
        ON f.user_id = u.id
ORDER BY user_name
`

type GetAllUserFeedsRow struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    string
	UserName  string
}

func (q *Queries) GetAllUserFeeds(ctx context.Context) ([]GetAllUserFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserFeedsRow
	for rows.Next() {
		var i GetAllUserFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
